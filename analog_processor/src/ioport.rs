#[path = "./arithmetic_logic_unit.rs"]
mod arithmetic_logic_unit;
use truncate;

const CYCLE_TIME_MICROSECONDS: usize = 4;
const OPCODE_LENGTH: usize = 4;

//Called by processor
pub fn recieve_commands(commands: Vec<String> ) {
    println!("----------");
    let mut registers: Vec<f64> = vec![0.0; 16];
    let mut run_time_microseconds = 0;
    let mut transferres = 0;
    let mut program_counter: usize = "0".parse::<usize>().expect("Not a number!");
    let mut done = false;
    //Run Cycles 
    while done == false {
        //Check for noise generated over time 
        run_time_microseconds = run_time_microseconds + CYCLE_TIME_MICROSECONDS;

        let opcode = truncate(&commands[program_counter], OPCODE_LENGTH);
        //Check for noise generated by transferre
        if opcode == "MOV "{
            println!("Transferre");
            transferres = transferres + 1;
        }
        if opcode == "NOP"{
            println!("Stopping");
            done = true;
            println!("----------");
            println!("Finished");
        }
        //Run a cycle
        arithmetic_logic_unit::run_cycle(&commands[program_counter], &mut registers, &mut program_counter);
    }
}